/**
 * A circus is designing a tower routine consisting of people standing atop one another¡¯s 
 * shoulders  For practical and aesthetic reasons, each person must be both shorter
 * and lighter than the person below him or her  Given the heights and weights of each
 * person in the circus, write a method to compute the largest possible number of people 
 * in such a tower
 * EXAMPLE:
 * Input (ht, wt): (65, 100) (70, 150) (56, 90) (75, 190) (60, 95) (68, 110)
 * Output: The longest tower is length 6 and includes from top to bottom: (56, 90)
 * (60,95) (65,100) (68,110) (70,150) (75,190)
 * 
 * !! The solution provided in the book cracking the coding interview is wrong.
 * 
 * My Notes:
 * 1. Topological sort? Longest Path, need O(n^2) time to build all the edges, then need 
 * 	  negate the edge weight and use shortest path algorithm (relax each edge in topological 
 *    order) to find the longest path, need two "virtual" vertices. 
 * 2. This program used classes such as AcyclicLP, EdgeWeightedDigraph, Topological, which 
 *    are from Algorithm class from Princeton. 
 * 3. Testing Example, for randomly generated 1000 items:
 *     (1, 16)  (1, 63)  (1, 65)  (1, 73)  (1, 86)  (2, 5)  (2, 12)  (2, 30)  (2, 32)  (2, 34) 
 (2, 45)  (2, 58)  (2, 70)  (2, 70)  (2, 78)  (2, 96)  (2, 97)  (3, 36)  (3, 45)  (3, 51) 
 (3, 52)  (3, 76)  (3, 77)  (3, 97)  (4, 4)  (4, 15)  (4, 16)  (4, 20)  (4, 24)  (4, 42) 
 (4, 46)  (4, 59)  (4, 70)  (4, 84)  (4, 88)  (5, 8)  (5, 47)  (5, 57)  (5, 80)  (6, 1) 
 (6, 12)  (6, 13)  (6, 16)  (6, 33)  (6, 39)  (6, 39)  (6, 41)  (6, 45)  (6, 46)  (6, 47) 
 (6, 49)  (6, 57)  (6, 72)  (6, 75)  (6, 78)  (7, 3)  (7, 14)  (7, 19)  (7, 34)  (7, 53) 
 (7, 72)  (7, 100)  (8, 1)  (8, 9)  (8, 12)  (8, 21)  (8, 48)  (8, 69)  (8, 70)  (8, 70) 
 (8, 82)  (8, 82)  (8, 91)  (8, 93)  (9, 6)  (9, 63)  (9, 95)  (10, 12)  (10, 21)  (10, 26) 
 (10, 32)  (10, 59)  (10, 89)  (10, 98)  (11, 60)  (11, 66)  (11, 66)  (11, 82)  (12, 1)  (12, 17) 
 (12, 22)  (12, 26)  (12, 30)  (12, 33)  (12, 62)  (12, 92)  (13, 8)  (13, 9)  (13, 19)  (13, 20) 
 (13, 36)  (13, 47)  (13, 63)  (13, 65)  (13, 77)  (13, 78)  (13, 86)  (13, 87)  (13, 89)  (14, 1) 
 (14, 4)  (14, 5)  (14, 27)  (14, 29)  (14, 43)  (14, 44)  (14, 56)  (14, 78)  (14, 79)  (14, 80) 
 (14, 95)  (15, 27)  (15, 47)  (15, 78)  (15, 79)  (15, 85)  (15, 85)  (16, 7)  (16, 11)  (16, 12) 
 (16, 27)  (16, 43)  (16, 48)  (16, 85)  (16, 91)  (17, 13)  (17, 15)  (17, 19)  (17, 30)  (17, 37) 
 (17, 56)  (17, 76)  (17, 91)  (18, 1)  (18, 5)  (18, 27)  (18, 45)  (18, 53)  (18, 73)  (18, 82) 
 (18, 94)  (19, 7)  (19, 17)  (19, 38)  (19, 42)  (19, 45)  (19, 56)  (19, 59)  (19, 60)  (19, 60) 
 (19, 62)  (19, 86)  (19, 88)  (19, 88)  (19, 93)  (19, 94)  (19, 96)  (19, 97)  (19, 98)  (20, 6) 
 (20, 11)  (20, 12)  (20, 13)  (20, 16)  (20, 22)  (20, 29)  (20, 31)  (20, 38)  (20, 45)  (20, 46) 
 (20, 57)  (20, 59)  (20, 59)  (20, 95)  (20, 97)  (20, 98)  (21, 2)  (21, 6)  (21, 18)  (21, 24) 
 (21, 32)  (21, 55)  (21, 75)  (21, 83)  (21, 84)  (21, 98)  (22, 4)  (22, 10)  (22, 15)  (22, 18) 
 (22, 18)  (22, 33)  (22, 42)  (22, 57)  (22, 79)  (22, 86)  (22, 92)  (22, 96)  (23, 6)  (23, 28) 
 (23, 30)  (23, 40)  (23, 50)  (23, 94)  (24, 10)  (24, 16)  (24, 28)  (24, 28)  (24, 33)  (24, 38) 
 (24, 47)  (24, 54)  (24, 59)  (24, 68)  (24, 83)  (24, 87)  (24, 88)  (24, 91)  (25, 12)  (25, 12) 
 (25, 24)  (25, 25)  (25, 31)  (25, 53)  (25, 77)  (25, 95)  (25, 99)  (26, 48)  (26, 55)  (26, 60) 
 (26, 65)  (26, 70)  (26, 87)  (26, 90)  (26, 94)  (27, 13)  (27, 17)  (27, 32)  (27, 74)  (27, 75) 
 (28, 6)  (28, 21)  (28, 46)  (28, 58)  (28, 62)  (28, 67)  (28, 70)  (28, 80)  (28, 90)  (28, 98) 
 (29, 17)  (29, 44)  (29, 44)  (29, 48)  (29, 54)  (29, 56)  (29, 56)  (29, 74)  (29, 79)  (29, 79) 
 (29, 83)  (29, 86)  (30, 7)  (30, 17)  (30, 17)  (30, 47)  (30, 55)  (30, 57)  (30, 59)  (30, 69) 
 (30, 73)  (30, 81)  (30, 94)  (31, 7)  (31, 11)  (31, 26)  (31, 34)  (31, 37)  (31, 38)  (31, 40) 
 (31, 50)  (31, 56)  (31, 82)  (31, 98)  (32, 8)  (32, 15)  (32, 19)  (32, 27)  (32, 48)  (32, 51) 
 (32, 55)  (32, 59)  (32, 83)  (33, 25)  (33, 38)  (33, 47)  (33, 48)  (33, 76)  (33, 77)  (33, 78) 
 (33, 80)  (33, 92)  (34, 2)  (34, 13)  (34, 27)  (34, 42)  (34, 44)  (34, 53)  (34, 67)  (34, 73) 
 (34, 90)  (34, 92)  (35, 3)  (35, 54)  (35, 56)  (35, 64)  (35, 70)  (35, 70)  (35, 75)  (35, 95) 
 (36, 3)  (36, 5)  (36, 14)  (36, 22)  (36, 34)  (36, 45)  (36, 50)  (36, 50)  (36, 69)  (36, 77) 
 (37, 3)  (37, 10)  (37, 19)  (37, 20)  (37, 20)  (37, 26)  (37, 28)  (37, 52)  (37, 68)  (37, 98) 
 (38, 15)  (38, 15)  (38, 17)  (38, 23)  (38, 26)  (38, 44)  (38, 53)  (38, 53)  (38, 66)  (38, 86) 
 (38, 97)  (39, 6)  (39, 10)  (39, 20)  (39, 31)  (39, 62)  (39, 84)  (39, 93)  (39, 95)  (39, 97) 
 (40, 11)  (40, 14)  (40, 15)  (40, 18)  (40, 19)  (40, 37)  (40, 55)  (40, 57)  (40, 58)  (40, 58) 
 (40, 83)  (40, 83)  (40, 91)  (40, 93)  (41, 4)  (41, 12)  (41, 25)  (41, 33)  (41, 51)  (41, 52) 
 (41, 52)  (41, 66)  (41, 79)  (41, 83)  (41, 86)  (41, 87)  (41, 90)  (42, 18)  (42, 31)  (42, 33) 
 (42, 37)  (42, 60)  (42, 67)  (42, 74)  (42, 84)  (42, 96)  (42, 96)  (43, 2)  (43, 21)  (43, 29) 
 (43, 50)  (43, 51)  (43, 54)  (43, 59)  (43, 65)  (43, 76)  (43, 76)  (43, 86)  (43, 99)  (44, 14) 
 (44, 17)  (44, 21)  (44, 49)  (44, 57)  (44, 60)  (44, 68)  (44, 80)  (44, 81)  (44, 84)  (44, 95) 
 (45, 14)  (45, 32)  (45, 52)  (45, 53)  (45, 69)  (45, 79)  (45, 93)  (45, 94)  (46, 5)  (46, 29) 
 (46, 36)  (46, 46)  (46, 59)  (46, 59)  (46, 78)  (46, 84)  (46, 87)  (46, 92)  (47, 25)  (47, 33) 
 (47, 42)  (47, 44)  (47, 63)  (47, 65)  (47, 78)  (48, 8)  (48, 11)  (48, 17)  (48, 43)  (48, 43) 
 (48, 44)  (48, 46)  (48, 55)  (48, 56)  (48, 66)  (49, 5)  (49, 11)  (49, 51)  (49, 57)  (49, 57) 
 (49, 62)  (49, 64)  (49, 68)  (49, 71)  (49, 86)  (49, 94)  (50, 12)  (50, 25)  (50, 26)  (50, 42) 
 (50, 43)  (50, 44)  (50, 55)  (50, 56)  (50, 58)  (50, 61)  (50, 93)  (50, 95)  (51, 10)  (51, 14) 
 (51, 15)  (51, 25)  (51, 29)  (51, 30)  (51, 75)  (51, 80)  (51, 88)  (52, 13)  (52, 79)  (52, 86) 
 (53, 4)  (53, 9)  (53, 20)  (53, 30)  (53, 51)  (53, 54)  (53, 57)  (53, 77)  (53, 78)  (53, 84) 
 (53, 89)  (54, 11)  (54, 17)  (54, 23)  (54, 25)  (54, 29)  (54, 33)  (54, 36)  (54, 39)  (54, 43) 
 (54, 51)  (54, 54)  (54, 54)  (54, 55)  (54, 63)  (54, 68)  (54, 80)  (55, 6)  (55, 10)  (55, 31) 
 (55, 32)  (55, 34)  (55, 43)  (55, 47)  (55, 50)  (55, 55)  (55, 55)  (55, 56)  (55, 62)  (55, 62) 
 (55, 62)  (55, 71)  (55, 78)  (55, 85)  (55, 86)  (55, 96)  (55, 99)  (56, 22)  (56, 29)  (56, 57) 
 (56, 65)  (56, 72)  (56, 87)  (56, 93)  (56, 95)  (57, 5)  (57, 20)  (57, 22)  (57, 36)  (57, 46) 
 (57, 55)  (57, 57)  (57, 61)  (57, 70)  (57, 80)  (58, 2)  (58, 17)  (58, 18)  (58, 20)  (58, 22) 
 (58, 27)  (58, 35)  (58, 37)  (58, 38)  (58, 40)  (58, 51)  (58, 69)  (58, 88)  (59, 36)  (59, 57) 
 (59, 58)  (59, 71)  (59, 77)  (59, 77)  (59, 77)  (59, 91)  (60, 41)  (60, 61)  (60, 62)  (60, 73) 
 (60, 76)  (60, 77)  (60, 85)  (60, 88)  (61, 4)  (61, 16)  (61, 16)  (61, 34)  (61, 47)  (61, 62) 
 (61, 81)  (61, 88)  (61, 91)  (61, 93)  (62, 1)  (62, 3)  (62, 5)  (62, 24)  (62, 37)  (62, 38) 
 (62, 45)  (62, 51)  (62, 70)  (62, 82)  (62, 99)  (63, 16)  (63, 28)  (63, 48)  (63, 49)  (63, 56) 
 (63, 98)  (63, 99)  (64, 5)  (64, 11)  (64, 24)  (64, 35)  (64, 56)  (64, 59)  (64, 61)  (64, 64) 
 (64, 64)  (64, 82)  (64, 89)  (65, 5)  (65, 8)  (65, 13)  (65, 30)  (65, 37)  (65, 54)  (65, 55) 
 (65, 65)  (65, 75)  (65, 89)  (65, 93)  (65, 100)  (66, 7)  (66, 23)  (66, 25)  (66, 30)  (66, 34) 
 (66, 44)  (66, 48)  (66, 56)  (66, 62)  (66, 63)  (66, 63)  (66, 65)  (66, 95)  (67, 17)  (67, 28) 
 (67, 93)  (67, 99)  (68, 8)  (68, 16)  (68, 19)  (68, 23)  (68, 42)  (68, 64)  (68, 67)  (68, 80) 
 (68, 95)  (69, 8)  (69, 9)  (69, 18)  (69, 33)  (69, 45)  (69, 48)  (69, 52)  (69, 53)  (69, 54) 
 (69, 54)  (69, 63)  (69, 70)  (69, 82)  (69, 89)  (69, 99)  (70, 10)  (70, 40)  (70, 92)  (70, 96) 
 (70, 99)  (71, 48)  (71, 49)  (71, 59)  (71, 62)  (71, 72)  (71, 78)  (71, 82)  (71, 83)  (71, 86) 
 (71, 92)  (71, 98)  (71, 99)  (72, 2)  (72, 16)  (72, 39)  (72, 60)  (72, 86)  (73, 15)  (73, 52) 
 (73, 54)  (73, 57)  (73, 63)  (73, 74)  (73, 83)  (73, 84)  (73, 86)  (73, 92)  (73, 97)  (74, 13) 
 (74, 26)  (74, 40)  (74, 51)  (74, 64)  (74, 68)  (74, 71)  (74, 76)  (74, 97)  (75, 6)  (75, 22) 
 (75, 27)  (75, 31)  (75, 40)  (75, 51)  (75, 52)  (75, 72)  (75, 87)  (76, 7)  (76, 11)  (76, 15) 
 (76, 41)  (76, 42)  (76, 44)  (76, 52)  (76, 83)  (76, 85)  (76, 85)  (76, 92)  (76, 94)  (77, 1) 
 (77, 16)  (77, 19)  (77, 53)  (77, 54)  (77, 66)  (77, 72)  (77, 91)  (78, 2)  (78, 4)  (78, 5) 
 (78, 8)  (78, 11)  (78, 14)  (78, 16)  (78, 18)  (78, 18)  (78, 26)  (78, 34)  (78, 64)  (78, 76) 
 (79, 9)  (79, 10)  (79, 10)  (79, 17)  (79, 24)  (79, 27)  (79, 39)  (79, 50)  (79, 56)  (79, 64) 
 (79, 65)  (79, 80)  (79, 82)  (79, 90)  (80, 28)  (80, 44)  (80, 44)  (80, 58)  (80, 62)  (81, 25) 
 (81, 30)  (81, 34)  (81, 45)  (81, 49)  (81, 49)  (81, 53)  (81, 56)  (81, 60)  (81, 73)  (81, 77) 
 (82, 8)  (82, 15)  (82, 19)  (82, 44)  (82, 52)  (82, 56)  (82, 61)  (82, 82)  (82, 83)  (82, 90) 
 (82, 96)  (83, 6)  (83, 10)  (83, 12)  (83, 31)  (83, 32)  (83, 33)  (83, 54)  (83, 59)  (83, 59) 
 (83, 59)  (83, 61)  (83, 77)  (84, 39)  (84, 67)  (84, 85)  (84, 93)  (85, 2)  (85, 23)  (85, 39) 
 (85, 49)  (85, 63)  (85, 79)  (85, 92)  (86, 7)  (86, 26)  (86, 30)  (86, 35)  (86, 49)  (86, 61) 
 (86, 66)  (86, 70)  (86, 77)  (86, 86)  (86, 88)  (87, 17)  (87, 25)  (87, 33)  (87, 35)  (87, 57) 
 (87, 65)  (87, 68)  (87, 80)  (87, 87)  (87, 88)  (87, 90)  (88, 2)  (88, 3)  (88, 13)  (88, 36) 
 (88, 44)  (88, 67)  (88, 67)  (88, 74)  (88, 79)  (88, 87)  (88, 93)  (88, 100)  (89, 28)  (89, 34) 
 (89, 39)  (89, 51)  (89, 71)  (89, 73)  (89, 90)  (89, 90)  (89, 93)  (89, 95)  (89, 97)  (89, 99) 
 (90, 11)  (90, 31)  (90, 32)  (90, 33)  (90, 34)  (90, 37)  (90, 55)  (90, 57)  (90, 68)  (90, 78) 
 (90, 96)  (91, 3)  (91, 4)  (91, 7)  (91, 8)  (91, 8)  (91, 15)  (91, 25)  (91, 27)  (91, 27) 
 (91, 29)  (91, 64)  (91, 74)  (91, 79)  (91, 82)  (92, 10)  (92, 12)  (92, 17)  (92, 24)  (92, 26) 
 (92, 30)  (92, 38)  (92, 42)  (92, 48)  (92, 49)  (92, 56)  (92, 69)  (92, 78)  (92, 89)  (93, 4) 
 (93, 13)  (93, 24)  (93, 44)  (93, 49)  (93, 55)  (93, 57)  (93, 60)  (93, 72)  (93, 81)  (93, 85) 
 (93, 96)  (94, 4)  (94, 5)  (94, 7)  (94, 10)  (94, 21)  (94, 34)  (94, 36)  (94, 62)  (94, 73) 
 (94, 77)  (94, 77)  (94, 83)  (94, 86)  (94, 87)  (94, 96)  (95, 20)  (95, 22)  (95, 27)  (95, 47) 
 (95, 60)  (95, 63)  (95, 71)  (95, 76)  (95, 81)  (96, 2)  (96, 12)  (96, 16)  (96, 23)  (96, 47) 
 (96, 53)  (96, 72)  (96, 81)  (97, 11)  (97, 24)  (97, 25)  (97, 30)  (97, 32)  (97, 34)  (97, 53) 
 (97, 54)  (97, 64)  (97, 67)  (97, 84)  (98, 28)  (98, 39)  (98, 40)  (98, 63)  (98, 78)  (98, 100) 
 (99, 16)  (99, 24)  (99, 25)  (99, 33)  (99, 36)  (99, 49)  (99, 52)  (99, 59)  (99, 61)  (99, 69) 
 (99, 78)  (99, 89)  (99, 90)  (99, 90)  (100, 9)  (100, 20)  (100, 37)  (100, 56)  (100, 57)  (100, 64) 
77
 (6, 1) -> (8, 1) -> (12, 1) -> (14, 1) -> (14, 4) -> (14, 5) -> (18, 5) -> (20, 6) -> (21, 6) -> (22, 10) -> 
 (24, 10) -> (25, 12) -> (25, 12) -> (27, 13) -> (27, 17) -> (29, 17) -> (30, 17) -> (30, 17) -> (32, 19) -> 
 (37, 19) -> (37, 20) -> (37, 20) -> (37, 26) -> (37, 28) -> (39, 31) -> (41, 33) -> (42, 33) -> (42, 37) -> 
 (47, 42) -> (48, 43) -> (48, 43) -> (48, 44) -> (48, 46) -> (49, 51) -> (53, 51) -> (53, 54) -> (54, 54) -> 
 (54, 54) -> (54, 55) -> (55, 55) -> (55, 55) -> (55, 56) -> (56, 57) -> (57, 57) -> (59, 57) -> (59, 58) -> 
 (60, 61) -> (60, 62) -> (61, 62) -> (66, 62) -> (66, 63) -> (66, 63) -> (69, 63) -> (73, 63) -> (74, 64) -> 
 (74, 68) -> (74, 71) -> (75, 72) -> (77, 72) -> (78, 76) -> (79, 80) -> (79, 82) -> (82, 82) -> (82, 83) -> 
 (84, 85) -> (86, 86) -> (86, 88) -> (87, 88) -> (87, 90) -> (89, 90) -> (89, 90) -> (89, 93) -> (89, 95) -> 
 (90, 96) -> (93, 96) -> (94, 96) -> (98, 100) ->

 * 
 */
package careercup;

import java.util.Arrays;

/**
 * @author X. Shen
 * 
 */
public class Ch9_7Tower {
	private Actor[] circus;
	private int N;
	private AcyclicLP path;
	private int s, v;

	private class Actor implements Comparable<Actor> {
		private final int ht, wt;

		public Actor() {
			ht = 0;
			wt = 0;
		}

		public Actor(int ht, int wt) {
			this.ht = ht;
			this.wt = wt;
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			sb.append(" (");
			sb.append(ht);
			sb.append(", ");
			sb.append(wt);
			sb.append(") ");
			return sb.toString();

		}

		public int compareTo(Actor that) {
			// TODO Auto-generated method stub
			if (this.ht != that.ht)
				return (this.ht - that.ht);
			else
				return (this.wt - that.wt);
		}
	}

	public Ch9_7Tower(String filename) {
		In in = new In(filename);
		N = in.readInt();
		circus = new Actor[N];
		for (int i = 0; i < N; i++) {
			int h = in.readInt();
			int w = in.readInt();
			circus[i] = new Actor(h, w);
		}
		in.close();
		Arrays.sort(circus);
		EdgeWeightedDigraph G = new EdgeWeightedDigraph(N + 2);
		for (int i = 0; i < N - 1; i++) {
			for (int j = i + 1; j < N; j++) {
				if (circus[j].wt >= circus[i].wt)
					G.addEdge(new DirectedEdge(i, j, 1));
			}
		}
		s = N;
		v = N + 1;
		for (int i = 0; i < N; i++) {
			G.addEdge(new DirectedEdge(s, i, 0));
			G.addEdge(new DirectedEdge(i, v, 0));
		}
		path = new AcyclicLP(G, s);
	}

	public void printTallestTower() {
		for (DirectedEdge e : path.pathTo(v)) {
			if (e.to() == N + 1)
				break;
			System.out.print(circus[e.to()] + "->");
		}
		return;
	}

	public int height() {
		return (int) path.distTo(N + 1) + 1;
	}

	public void print() {
		for (int i = 0; i < N; i++) {
			System.out.print(circus[i]);
			if (i % 10 == 9) System.out.println();
		}
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		long startTime = System.currentTimeMillis();
		Ch9_7Tower test = new Ch9_7Tower(args[0]);
		test.print();
		System.out.println(test.height());
		test.printTallestTower();
		System.out.println();

//		long stopTime = System.currentTimeMillis();
//		long elapsedTime = stopTime - startTime;
//		System.out.println(elapsedTime);

	}

}
